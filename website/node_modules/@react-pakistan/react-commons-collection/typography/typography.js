"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Typography = void 0;
var react_1 = __importStar(require("react"));
var styled_1 = require("./styled");
var grid_1 = require("../grid");
var h1_1 = require("../h1");
var h2_1 = require("../h2");
var h3_1 = require("../h3");
var h4_1 = require("../h4");
var h5_1 = require("../h5");
var text_1 = require("../text");
exports.Typography = react_1.memo(function (_a) {
    var theme = _a.theme;
    return (react_1.default.createElement(grid_1.Grid, { columnGap: '2em', gridColumn: '1fr 1fr 1fr', gridRow: '1fr 1fr', rowGap: '2em' },
        react_1.default.createElement(styled_1.TypographyWrapper, null,
            react_1.default.createElement(styled_1.TypographyText, null, Object.keys(theme.typography.h1).map(function (key) { return (react_1.default.createElement(text_1.Text, { color: theme.colors.white, key: key }, key + " - " + theme.typography.h1[key])); })),
            react_1.default.createElement(h1_1.H1, { color: theme.colors.white }, "Heading1")),
        react_1.default.createElement(styled_1.TypographyWrapper, null,
            react_1.default.createElement(styled_1.TypographyText, null, Object.keys(theme.typography.h2).map(function (key) { return (react_1.default.createElement(text_1.Text, { color: theme.colors.white, key: key }, key + " - " + theme.typography.h2[key])); })),
            react_1.default.createElement(h2_1.H2, { color: theme.colors.white }, "Heading2")),
        react_1.default.createElement(styled_1.TypographyWrapper, null,
            react_1.default.createElement(styled_1.TypographyText, null, Object.keys(theme.typography.h3).map(function (key) { return (react_1.default.createElement(text_1.Text, { color: theme.colors.white, key: key }, key + " - " + theme.typography.h3[key])); })),
            react_1.default.createElement(h3_1.H3, { color: theme.colors.white }, "Heading3")),
        react_1.default.createElement(styled_1.TypographyWrapper, null,
            react_1.default.createElement(styled_1.TypographyText, null, Object.keys(theme.typography.h4).map(function (key) { return (react_1.default.createElement(text_1.Text, { color: theme.colors.white, key: key }, key + " - " + theme.typography.h4[key])); })),
            react_1.default.createElement(h4_1.H4, { color: theme.colors.white }, "Heading4")),
        react_1.default.createElement(styled_1.TypographyWrapper, null,
            react_1.default.createElement(styled_1.TypographyText, null, Object.keys(theme.typography.h5).map(function (key) { return (react_1.default.createElement(text_1.Text, { color: theme.colors.white, key: key }, key + " - " + theme.typography.h5[key])); })),
            react_1.default.createElement(h5_1.H5, { color: theme.colors.white }, "Heading5")),
        react_1.default.createElement(styled_1.TypographyWrapper, null,
            react_1.default.createElement(styled_1.TypographyText, null, Object.keys(theme.typography.text).map(function (key) { return (react_1.default.createElement(text_1.Text, { color: theme.colors.white, key: key }, key + " - " + theme.typography.text[key])); })),
            react_1.default.createElement(text_1.Text, { color: theme.colors.white }, "Text")),
        react_1.default.createElement(styled_1.TypographyWrapper, null,
            react_1.default.createElement(styled_1.TypographyText, null, Object.keys(theme.spacing).map(function (key) { return (react_1.default.createElement(text_1.Text, { color: theme.colors.white, key: key }, key + " - " + theme.spacing[key])); })),
            react_1.default.createElement(text_1.Text, { color: theme.colors.white }, "Spacing")),
        react_1.default.createElement(styled_1.TypographyWrapper, null,
            react_1.default.createElement(styled_1.TypographyText, null, Object.keys(theme.breakpoints).map(function (key) { return (react_1.default.createElement(text_1.Text, { color: theme.colors.white, key: key }, key + " - " + theme.breakpoints[key])); })),
            react_1.default.createElement(text_1.Text, { color: theme.colors.white }, "Breakpoints")),
        react_1.default.createElement(styled_1.TypographyWrapper, null,
            react_1.default.createElement(styled_1.TypographyText, null, Object.keys(theme.radius).map(function (key) { return (react_1.default.createElement(text_1.Text, { color: theme.colors.white, key: key }, key + " - " + theme.radius[key])); })),
            react_1.default.createElement(text_1.Text, { color: theme.colors.white }, "Radius")),
        react_1.default.createElement(styled_1.TypographyWrapper, null,
            react_1.default.createElement(styled_1.TypographyText, null, Object.keys(theme.shadow).map(function (key) { return (react_1.default.createElement(text_1.Text, { color: theme.colors.white, key: key }, key + " - " + theme.shadow[key].toString())); })),
            react_1.default.createElement(text_1.Text, { color: theme.colors.white }, "Shadow")),
        react_1.default.createElement(styled_1.TypographyWrapper, null,
            react_1.default.createElement(styled_1.TypographyText, null, Object.keys(theme.zIndex).map(function (key) { return (react_1.default.createElement(text_1.Text, { color: theme.colors.white, key: key }, key + " - " + theme.zIndex[key])); })),
            react_1.default.createElement(text_1.Text, { color: theme.colors.white }, "zIndex"))));
});
